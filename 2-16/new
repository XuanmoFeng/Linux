#ifndef _COMM_
#define _COMM_
#include <stdio.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <sys/ipc.h>
#include <sys/sem.h>
#include<unistd.h>
#define PATHNAME "."
#define FLAG 0x666

union semun {
	int val;    /* Value for SETVAL */
	struct semid_ds *buf;    /* Buffer for IPC_STAT, IPC_SET */
	unsigned short  *array;  /* Array for GETALL, SETALL */
	struct seminfo  *__buf;  /* Buffer for IPC_INFO																                                           (Linux-specific) */
	};


int creatShm();
int getShm();
int initShm(int sem_id,int which,int value);
int P(int sem_id,int which);
int V(int sem_id,int which);
int destory(int sem_id,int which);


#endif
#include "comm.h"
static int comShm(int flag)
{
	key_t id = ftok(PATHNAME,FLAG);
	if(id<0)
	{
		perror("ftok");
		return -1;
	}
	int shmid = semget(id,1,flag);
	if(shmid<0)
	{
		perror("semget");
		return -2;
	}
	return shmid;
}
int creatShm()
{
	return comShm(IPC_CREAT|IPC_EXCL|0666);
}

	//initShm(sem_id,1,0);
int initShm(int sem_id,int which,int value)
{
	union semun se;
	se.val= value;
	//se.array=1;
	int ret =semctl(sem_id,which,SETVAL,se);

	if(ret<0)
	{
		perror("semctl");
		return -1;
	}
	return ret;
}
int P(int id,int which)
{
	struct sembuf sem;
	sem.sem_num =which;
	sem.sem_op=-1;
	sem.sem_flg=0;
	int ret = semop(id,&sem,1);
	if(ret<0)
	{
		perror("P error");
		return -4;
	}
	return ret;	
}
int getShm()
{
	return comShm(IPC_CREAT);
}

int V(int id ,int which)
{
	struct sembuf sem;
	sem.sem_num =which;
	sem.sem_op=1;
	sem.sem_flg=0;
	int ret =semop(id,&sem,1);
	if(ret <0)
	{
		perror("V error");
		return -5;
	}
	return ret;
}
int destory(int id,int which)
{
	int ret=semctl(id,which,IPC_RMID);
	if(ret<0)
	{
		perror("semctl");
		return -3;
	}
	return ret;
}
#include "comm.h"
int main()
{
	int sem_id =creatShm();
	initShm(sem_id,0,1);
	pid_t id= fork();
	if(id==0)
	{
		while(1)
		{
			P(sem_id,0);
			usleep(1000);
			printf("A");
			usleep(1222);
			printf("A");
			fflush(stdout);
			V(sem_id,0);
		}
	}
	else
	{
		while(1)
		{
			P(sem_id,0);
			usleep(1600);
			printf("B");
			usleep(1003);
			printf("B");
			fflush(stdout);
			V(sem_id,0);			
		}
		wait(NULL);
	}
	destory(sem_id,0);
	return 0;
}
server=server
cc=gcc
serSrc=server.c comm.c

.PHONY:all
all:$(server)
$(server):$(serSrc)
	$(cc) -g -o $@ $^

.PHONY:clean
clean:
	rm $(server)
